{"ast":null,"code":"var _jsxFileName = \"/home/juan/IdeaProjects/todoapp/front/todo/src/security/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext } from \"react\";\nimport { apiClient } from \"../api/ApiClient\";\nimport { executeJwtAuthenticationService } from \"../api/AuthenticationApiService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function AuthProvider(_ref) {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [token, setToken] = useState(\"\");\n  async function login(username, password) {\n    try {\n      const response = await executeJwtAuthenticationService(username, password);\n      console.log(response);\n      if (response.status === 200) {\n        const jwtToken = `Bearer ${response.data.token}`;\n        setIsAuthenticated(true);\n        setUsername(username);\n        setToken(jwtToken);\n        apiClient.interceptors.request.use(config => {\n          config.headers.Authorization = jwtToken;\n          return config;\n        });\n        return true;\n      } else {\n        logout();\n        return false;\n      }\n    } catch (error) {\n      logout();\n      return false;\n    }\n  }\n  function logout() {\n    setIsAuthenticated(false);\n    setUsername(\"\");\n    setToken(\"\");\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout,\n      username,\n      token\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"Hh3gtgxSmH2RlcMm2/xtj/849hY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useContext","apiClient","executeJwtAuthenticationService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","_ref","_s2","children","isAuthenticated","setIsAuthenticated","username","setUsername","token","setToken","login","password","response","console","log","status","jwtToken","data","interceptors","request","use","config","headers","Authorization","logout","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/juan/IdeaProjects/todoapp/front/todo/src/security/AuthContext.js"],"sourcesContent":["import { createContext, useState , useContext} from \"react\";\nimport { apiClient } from \"../api/ApiClient\";\nimport { executeJwtAuthenticationService } from \"../api/AuthenticationApiService\";\n\nexport const AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext)\n\n\nexport default function AuthProvider({ children }) {\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const [username, setUsername] = useState(\"\");\n    const [token, setToken] = useState(\"\");\n\n\n    async function login(username, password) {\n        try{\n            const response = await executeJwtAuthenticationService(username, password);\n    \n            console.log(response)\n            if (response.status === 200) {\n                const jwtToken = `Bearer ${response.data.token}`\n                setIsAuthenticated(true);\n                setUsername(username);\n                setToken(jwtToken);\n                apiClient.interceptors.request.use(\n                    config => {\n                        config.headers.Authorization = jwtToken;\n                        return config;\n                    }\n                )\n                return true;\n            } else {\n                logout()  \n                return false;\n            }\n\n        } catch (error) {\n            logout()\n            return false;\n        }\n    }\n\n    function logout(){\n        setIsAuthenticated(false);\n        setUsername(\"\");\n        setToken(\"\");\n    }\n\n    return (\n        <AuthContext.Provider value={{ isAuthenticated, login, logout, username, token }}>\n            {children}\n        </AuthContext.Provider>\n    );\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAGC,UAAU,QAAO,OAAO;AAC3D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,+BAA+B,QAAQ,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElF,OAAO,MAAMC,WAAW,gBAAGP,aAAa,EAAE;AAE1C,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,WAAW,CAAC;AAAA;AAAAE,EAAA,CAAvCD,OAAO;AAGpB,eAAe,SAASE,YAAYA,CAAAC,IAAA,EAAe;EAAAC,GAAA;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC7C,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAGtC,eAAemB,KAAKA,CAACJ,QAAQ,EAAEK,QAAQ,EAAE;IACrC,IAAG;MACC,MAAMC,QAAQ,GAAG,MAAMlB,+BAA+B,CAACY,QAAQ,EAAEK,QAAQ,CAAC;MAE1EE,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrB,IAAIA,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QACzB,MAAMC,QAAQ,GAAI,UAASJ,QAAQ,CAACK,IAAI,CAACT,KAAM,EAAC;QAChDH,kBAAkB,CAAC,IAAI,CAAC;QACxBE,WAAW,CAACD,QAAQ,CAAC;QACrBG,QAAQ,CAACO,QAAQ,CAAC;QAClBvB,SAAS,CAACyB,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAI;UACNA,MAAM,CAACC,OAAO,CAACC,aAAa,GAAGP,QAAQ;UACvC,OAAOK,MAAM;QACjB,CAAC,CACJ;QACD,OAAO,IAAI;MACf,CAAC,MAAM;QACHG,MAAM,EAAE;QACR,OAAO,KAAK;MAChB;IAEJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZD,MAAM,EAAE;MACR,OAAO,KAAK;IAChB;EACJ;EAEA,SAASA,MAAMA,CAAA,EAAE;IACbnB,kBAAkB,CAAC,KAAK,CAAC;IACzBE,WAAW,CAAC,EAAE,CAAC;IACfE,QAAQ,CAAC,EAAE,CAAC;EAChB;EAEA,oBACIb,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAAEvB,eAAe;MAAEM,KAAK;MAAEc,MAAM;MAAElB,QAAQ;MAAEE;IAAM,CAAE;IAAAL,QAAA,EAC5EA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACU;AAE/B;AAAC7B,GAAA,CA7CuBF,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}